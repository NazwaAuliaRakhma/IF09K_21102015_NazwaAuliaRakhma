# -*- coding: utf-8 -*-
"""TUBES DAA

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mhxEyjRfddo7_0PIR9QS9hcFHSQbJjTu
"""

#Proyek Greedy dengan Bahasa Python
#Nazwa Aulia Rakhma
#21102015
#IF-09-K
import time #Library untuk menampilkan waktu

def JadwalProyekGreedy(aktivitas, durasi, ketergantungan):
    aktivitasSudah = []  #menyimpan aktivitas yang sudah terjadwal
    aktivitasBelum = aktivitas[:]  #menyimpan aktivitas yang belum terjadwal

    waktuMulai = time.time()  #catat waktu mulai

    while aktivitasBelum:
        waktuTerpendek = float('inf')
        aktivitasTerpilih = None

        #Memeriksa apakah aktivitas memiliki ketergantungan tidak
        for aktivitas in aktivitasBelum:
            if aktivitas not in ketergantungan or all(dep in aktivitasSudah for dep in ketergantungan[aktivitas]):
                if durasi[aktivitas] < waktuTerpendek:
                    waktuTerpendek = durasi[aktivitas]
                    aktivitasTerpilih = aktivitas

        #Tambahkan aktivitas terpilih ke dalam aktivitas yang sudah terjadwal
        aktivitasSudah.append(aktivitasTerpilih)

        #Hapus aktivitas terpilih dari aktivitas yang belum terjadwal
        aktivitasBelum.remove(aktivitasTerpilih)

    waktuSelesai = time.time()  #catat waktu selesai
    lamaEksekusi = waktuSelesai - waktuMulai  #lama waktu eksekusi

    return aktivitasSudah, lamaEksekusi

#Inisialisasi data aktivitas, durasi dan ketergantungan
aktivitas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
durasi = {'A': 4, 'B': 5, 'C': 2, 'D': 3, 'E': 6, 'F': 4, 'G': 2, 'H': 3}
ketergantungan = {'B': ['A'], 'C': ['A'], 'D': ['B', 'C'], 'E': ['D'], 'F': ['D'], 'G': ['F'], 'H': ['E', 'G']}

#Panggil fungsi JadwalProyekGreedy untuk mendapatkan jadwal penyelesaian proyek dan lama waktu eksekusi
aktivitasSudah, lamaEksekusi = JadwalProyekGreedy(aktivitas, durasi, ketergantungan)

#Tampilkan hasil jadwal penyelesaian proyek dan lama waktu eksekusi
print("Jadwal Penyelesaian Proyek Greedy:")
print(aktivitasSudah)
print("Lama waktu eksekusi:", lamaEksekusi, "detik")

# Proyek Branch and Bound
# Nazwa Aulia Rakhma
# 21102015
# IF-09-K
import time  # Library untuk menampilkan waktu

def JadwalProyekBB(aktivitas, durasi, ketergantungan):
    def backtracking(jadwalSekarang, aktivitasLain):  # Lainnya dalam artian sisa dari aktivitas
        nonlocal jadwalTerbaik

        # Jika semua aktivitas telah ditempatkan pada jadwal
        if not aktivitasLain:
            if not jadwalTerbaik or totalDurasi(jadwalSekarang) < totalDurasi(jadwalTerbaik):
                jadwalTerbaik = jadwalSekarang
            return

        for aktivitas in aktivitasLain:
            if aktivitas not in ketergantungan or all(dep in jadwalSekarang for dep in ketergantungan[aktivitas]):
                jadwalBaru = jadwalSekarang + [aktivitas]
                sisaAktBaru = aktivitasLain[:]
                sisaAktBaru.remove(aktivitas)
                backtracking(jadwalBaru, sisaAktBaru)

    def totalDurasi(jadwal):
        total = 0
        for aktivitas in jadwal:
            total += durasi[aktivitas]
        return total

    jadwalSudah = []  # Menyimpan aktivitas yang telah terjadwal
    aktivitasBelum = aktivitas[:]  # Menyimpan aktivitas yang belum terjadwal
    jadwalTerbaik = None

    waktuMulai = time.time()  # Catat waktu mulai

    # Panggil fungsi backtracking untuk mencari solusi terbaik
    backtracking(jadwalSudah, aktivitasBelum)

    waktuSelesai = time.time()  # Catat waktu selesai
    lamaEksekusi = waktuSelesai - waktuMulai  # Lama waktu eksekusi

    return jadwalTerbaik, lamaEksekusi

# Inisialisasi data aktivitas, durasi, dan ketergantungan
aktivitas = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H']
durasi = {'A': 4, 'B': 5, 'C': 2, 'D': 3, 'E': 6, 'F': 4, 'G': 2, 'H': 3}
ketergantungan = {'B': ['A'], 'C': ['A'], 'D': ['B', 'C'], 'E': ['D'], 'F': ['D'], 'G': ['F'], 'H': ['E', 'G']}

# Panggil fungsi JadwalProyekBB untuk mendapatkan jadwal penyelesaian proyek dan lama waktu eksekusi
jadwalTerbaik, lamaEksekusi = JadwalProyekBB(aktivitas, durasi, ketergantungan)

# Tampilkan hasil jadwal penyelesaian proyek dan lama waktu eksekusi
print("Jadwal Penyelesaian Proyek B&B:")
print(jadwalTerbaik)
print("Lama waktu eksekusi:", lamaEksekusi, "detik")